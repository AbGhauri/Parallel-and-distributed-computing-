
Image Preprocessing and Parallelization Performance Report

--------------------------------------------------------
|  Approach      |   Time (sec)    |
--------------------------------------------------------
| Sequential     	| 42.39           |
| Parallel (2w)  	| 32.19           |
| Parallel (4w)  	| 1.51            |
| Parallel (8w)  	| 1.58            |
| Distributed (2 Nodes) | 1.31            |
--------------------------------------------------------

Best Number of Workers:
--------------------------------------------------------
Based on the timings, the best performance was achieved with 4 workers (Time: 1.51 sec). This was slightly faster than 8 workers, suggesting the overhead of managing additional parallel threads or processes may offset gains beyond 4 workers for this dataset size.

Discussion:
--------------------------------------------------------
Parallelism improved processing speed dramatically over sequential execution, with more than a 21x speedup (4 workers) and similar performance for distributed processing. Most of the bottleneck now comes from the input/output operations to Google Drive (I/O), Python interpreter overhead, and thread/process contention. For even larger datasets, distributed and parallel processing will help even more, but only up to the point where I/O and communication outweigh CPU benefits.

--------------------------------------------------------
